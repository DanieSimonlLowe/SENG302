plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
	id 'org.sonarqube' version '4.0.0.2929'
}

group = 'nz.ac.canterbury.seng302.team800'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.h2database:h2'

	implementation 'org.springframework.boot:spring-boot-starter-security'

	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-mail
	implementation 'org.springframework.boot:spring-boot-starter-mail:3.0.4'

	// https://mvnrepository.com/artifact/org.webjars.npm/toast-ui__calendar
	implementation 'org.webjars.npm:toast-ui__calendar:2.1.3'


	// https://mvnrepository.com/artifact/org.webjars/bootstrap
	implementation 'org.webjars:bootstrap:5.2.3'

	// https://mvnrepository.com/artifact/org.webjars/popper.js/
	implementation 'org.webjars:popper.js:2.9.3'

	// https://mvnrepository.com/artifact/org.webjars/webjars-locator
	implementation 'org.webjars:webjars-locator:0.46'


	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-params'
	testImplementation "io.cucumber:cucumber-spring:7.5.0"
	testImplementation "io.cucumber:cucumber-java:7.5.0"
	testImplementation "com.microsoft.playwright:playwright:1.32.0"

	implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.4'
}

configurations {
	cucumberRuntime {
		extendsFrom testImplementation
	}
}

tasks.register('integration') {
	dependsOn assemble, testClasses
	group = 'verification'
	doLast {
		javaexec {
			main = "io.cucumber.core.cli.Main"
			classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
			args = [
					'--plugin', 'pretty',
					'--plugin', 'html:target/integration-report.html',
					'--glue', 'nz/ac/canterbury/seng302/tab/integration',
					'src/test/resources/features/integration'
			]
		}
	}
}

tasks.register('end2end') {
	dependsOn assemble, testClasses
	group = "verification"
	doLast {
		def isolateTags = findIsolateTags()
		def tagsArg = isolateTags ? ['--tags', '@isolate'] : ['--tags', 'not @ignore']

		javaexec {
			main = "io.cucumber.core.cli.Main"
			classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
			args = [
					tagsArg,
					'--plugin', 'pretty',
					'--plugin', 'html:target/end2end-report.html',
					'--glue', 'nz/ac/canterbury/seng302/tab/end2end',
					'src/test/resources/features/end2end'
			].flatten()
		}
	}
}

def findIsolateTags() {
	def featureFilesDir = file("src/test/resources/features/end2end")
	def isolateTagFound = false

	featureFilesDir.traverse(type: groovy.io.FileType.FILES) { file ->
		if (file.text.contains('@isolate')) {
			isolateTagFound = true
			return false // Stop the traversal as we found an '@isolate' tagged file
		}
	}

	return isolateTagFound
}

bootRun {
	// Thymeleaf hot reload
	jvmArgs = [
	        '-Dspring.thymeleaf.cache=false',
			'-Dspring.thymeleaf.prefix=file:src/main/resources/templates/',
			'-Dspring.thymeleaf.sufix=.html',
			'-Dspring.devtools.restart.enabled=true'
	]

	doFirst {
		// Add src/main/resources directory to classpath
		classpath = sourceSets.main.runtimeClasspath
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

tasks.named('check') {
	dependsOn test, end2end, integration
}

// Jacoco test coverage configuration
jacoco {
	toolVersion ="0.8.9"
}

// Select what reports Jacoco generates and where to put them
jacocoTestReport {
	reports {
		xml.enabled true
		xml.destination file("${buildDir}/jacoco/test-report.xml")
		csv.enabled false
		html.destination file("${buildDir}/jacoco/html")
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "team-800"
		property "sonar.projectName", "team 800"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.host.url", "https://sonarqube.csse.canterbury.ac.nz"
		property "sonar.login", "$System.env.SONARQUBE_TOKEN"
		// For pipelines, run for a branch build only
		if(System.env.CI_MERGE_REQUEST_IID == null || System.env.CI_MERGE_REQUEST_IID.trim().isEmpty()) {
			property "sonar.branch.name", "$System.env.CI_COMMIT_REF_NAME"
		}
		// For pipelines, run as part of merge request
		else {
			property "sonar.pullrequest.key", "$System.env.CI_MERGE_REQUEST_IID"
			property "sonar.pullrequest.branch", "$System.env.CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
			property "sonar.pullrequest.base", "$System.env.CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
		}
	}
}
